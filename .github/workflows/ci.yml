name: CI/CD Pipeline - Noli Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  CACHE_VERSION: 'v2'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint -- --format=json --output-file=eslint-report.json --max-warnings=10
        continue-on-error: true

      - name: Run Prettier check
        run: npm run format:check

      - name: Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json
          retention-days: 30

      - name: Comment PR with ESLint results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const eslintReport = JSON.parse(fs.readFileSync('eslint-report.json', 'utf8'));
              if (eslintReport.length > 0) {
                const errors = eslintReport.filter(r => r.severity === 2);
                const warnings = eslintReport.filter(r => r.severity === 1);

                const comment = `## ESLint Results 📊

                🚨 **${errors.length} errors** found
                ⚠️ **${warnings.length} warnings** found

                ${errors.length > 0 ? '### ❌ Errors:\n' + errors.map(e => `- **${e.ruleId}**: ${e.message} (${e.filePath}:${e.line}:${e.column})`).join('\n') : ''}
                ${warnings.length > 0 ? '### ⚠️ Warnings:\n' + warnings.map(w => `- **${w.ruleId}**: ${w.message} (${w.filePath}:${w.line}:${w.column})`).join('\n') : ''}

                Please fix these issues before merging.`;

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('No ESLint report found or error reading it');
            }

  security:
    name: Security Audit & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for vulnerabilities
        run: |
          echo "🔍 Checking for known vulnerabilities..."
          npm audit --json > audit-report.json || true

          # Extract high/critical vulnerabilities
          node -e "
            const report = JSON.parse(require('fs').readFileSync('audit-report.json', 'utf8'));
            const vulns = report.vulnerabilities || {};
            const high = Object.values(vulns).filter(v => v.severity === 'high').length;
            const critical = Object.values(vulns).filter(v => v.severity === 'critical').length;

            if (critical > 0) {
              console.error('🚨 CRITICAL vulnerabilities found:', critical);
              process.exit(1);
            } else if (high > 0) {
              console.warn('⚠️ HIGH vulnerabilities found:', high);
            } else {
              console.log('✅ No HIGH or CRITICAL vulnerabilities found');
            }
          "

      - name: Run security tests
        run: |
          echo "🔒 Running custom security tests..."
          npm run test:run -- src/lib/__tests__/secure-auth.test.ts
          npm run test:run -- src/lib/__tests__/csp.test.ts

      - name: Check for console.log in source
        run: |
          echo "🚫 Checking for console.log statements in source code..."
          if grep -r "console\.log" src/ --include="*.ts" --include="*.tsx" | grep -v test | grep -v __tests__; then
            echo "❌ Found console.log statements in source code"
            exit 1
          else
            echo "✅ No console.log statements found in source code"
          fi

      - name: Validate secure configuration
        run: |
          echo "🔍 Validating secure configuration..."
          # Check for hardcoded secrets
          if grep -r -i "password.*=\|secret.*=\|token.*=\|api_key.*=" src/ --include="*.ts" --include="*.tsx" | grep -v "\.example" | grep -v "\.template" | grep -v test; then
            echo "⚠️ Potential hardcoded secrets found"
            exit 1
          fi

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run -- --reporter=json --outputFile=test-results-${{ matrix.node-version }}.json

      - name: Run coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.node-version == 18
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: test-results-${{ matrix.node-version }}.json
          retention-days: 30

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload E2E test videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: test-results/
          retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, security, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build size
        run: |
          echo "📦 Analyzing build size..."
          du -sh dist/
          find dist/ -name "*.js" -exec ls -lh {} \; | head -10

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  bundle-analyzer:
    name: Analyze Bundle Size
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Analyze bundle size
        run: |
          npx webpack-bundle-analyzer dist/static/js/*.js --mode=json --report=bundle-report.json || true

      - name: Comment PR with bundle analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const bundleReport = JSON.parse(fs.readFileSync('bundle-report.json', 'utf8'));
              const totalSize = bundleReport.reduce((sum, chunk) => sum + chunk.parsedSize, 0);
              const sizeInMB = (totalSize / 1024 / 1024).toFixed(2);

              const comment = `## 📦 Bundle Analysis

              **Total Bundle Size**: ${sizeInMB} MB (${totalSize.toLocaleString()} bytes)

              ### Largest Chunks:
              ${bundleReport.slice(0, 5).map(chunk =>
                `- **${chunk.label}**: ${(chunk.parsedSize / 1024).toFixed(2)} KB`
              ).join('\n')}

              ${totalSize > 5 * 1024 * 1024 ? '⚠️ **Bundle size is large (>5MB). Consider code splitting or optimizations.**' : '✅ Bundle size is reasonable.'}`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Bundle analysis failed:', error.message);
            }

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, security, test, test-e2e, build]
    if: always()

    steps:
      - name: Notify Slack on Success
        if: needs.build.result == 'success'
        run: |
          echo "✅ CI Pipeline completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
        # Add Slack webhook here if needed

      - name: Notify Slack on Failure
        if: needs.build.result == 'failure' || needs.test.result == 'failure' || needs.test-e2e.result == 'failure'
        run: |
          echo "❌ CI Pipeline failed!"
          echo "Failed jobs:
          - Lint: ${{ needs.lint.result }}
          - Security: ${{ needs.security.result }}
          - Tests: ${{ needs.test.result }}
          - E2E Tests: ${{ needs.test-e2e.result }}
          - Build: ${{ needs.build.result }}"
        # Add Slack webhook here if needed