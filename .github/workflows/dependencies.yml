name: Dependencies & Security

on:
  schedule:
    - cron: '0 2 * * 1' # Every Monday at 2 AM UTC
  workflow_dispatch:

jobs:
  dependency-update:
    name: Update Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for outdated packages
        run: |
          echo "📦 Checking for outdated packages..."
          npm outdated --json > outdated.json || true

      - name: Update dependencies
        run: |
          echo "🔄 Updating dependencies..."
          npm update
          npm audit fix --audit-level=moderate

      - name: Run tests after update
        run: npm run test:run

      - name: Build after update
        run: npm run build

      - name: Create Pull Request for updates
        if: success()
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: '🔄 Weekly Dependency Updates'
          body: |
            ## 🔄 Weekly Dependency Updates

            This PR updates dependencies to their latest versions:

            ### 📦 Updated Packages
            - Check the package-lock.json for detailed changes

            ### ✅ Validations
            - [x] Tests pass
            - [x] Build succeeds
            - [x] No security vulnerabilities

            ### 🚀 Deployment
            This will be merged automatically if all checks pass.

            ---
            *Automatically generated by GitHub Actions*
          branch: deps/update-dependencies
          delete-branch: true
          labels: |
            dependencies
            automated

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate Security Report
        run: |
          echo "🔒 Security Report" > security-report.md
          echo "" >> security-report.md
          echo "## Snyk Results" >> security-report.md
          npm audit --json > audit.json || true
          node -e "
            const audit = JSON.parse(require('fs').readFileSync('audit.json', 'utf8'));
            const vulns = audit.vulnerabilities || {};
            const high = Object.values(vulns).filter(v => v.severity === 'high').length;
            const critical = Object.values(vulns).filter(v => v.severity === 'critical').length;
            const moderate = Object.values(vulns).filter(v => v.severity === 'moderate').length;

            console.log('### Summary');
            console.log('- Critical: ' + critical);
            console.log('- High: ' + high);
            console.log('- Moderate: ' + moderate);
            console.log('');
            if (critical > 0 || high > 0) {
              console.log('### 🚨 Requires Immediate Attention');
              Object.values(vulns)
                .filter(v => v.severity === 'critical' || v.severity === 'high')
                .forEach(v => {
                  console.log('- **' + v.name + '** (' + v.severity.toUpperCase() + '): ' + v.title);
                  console.log('  - Fix: \`npm audit fix\`');
                  console.log('');
                });
            }
          " >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Calculate Test Coverage
        run: |
          npm run test:coverage
          echo "📊 Test Coverage Report Generated"

      - name: Coverage Badge
        uses: tj-actions/coverage-badge-js@v2
        with:
          output: coverage-badge.svg

      - name: Update Coverage Badge
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add coverage-badge.svg
          git commit -m "chore: update coverage badge" || exit 0
          git push || exit 0

  performance-scan:
    name: Performance Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Bundle Size Analysis
        run: |
          echo "📦 Analyzing bundle size..."
          npx bundlesize

      - name: Performance Budget Check
        run: |
          echo "⚡ Checking performance budget..."
          # Add performance budget checks here
          TOTAL_SIZE=$(du -sk dist/ | cut -f1)
          MAX_SIZE=5000 # 5MB max

          if [ $TOTAL_SIZE -gt $MAX_SIZE ]; then
            echo "❌ Bundle size ($TOTAL_SIZE KB) exceeds maximum allowed size ($MAX_SIZE KB)"
            exit 1
          else
            echo "✅ Bundle size ($TOTAL_SIZE KB) is within limits"
          fi

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: |
          npm install -g license-checker
          license-checker --excludePrivatePackages --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' > licenses.json || true

      - name: Validate licenses
        run: |
          node -e "
          const fs = require('fs');
          try {
            const licenses = JSON.parse(fs.readFileSync('licenses.json', 'utf8'));
            const incompatible = Object.values(licenses).filter(pkg =>
              pkg.licenses && !['MIT', 'Apache-2.0', 'BSD-2-Clause', 'BSD-3-Clause', 'ISC', '0BSD'].some(allowed =>
                pkg.licenses.includes(allowed)
              )
            );

            if (incompatible.length > 0) {
              console.log('❌ Incompatible licenses found:');
              incompatible.forEach(pkg => {
                console.log('- ' + pkg.name + ': ' + pkg.licenses.join(', '));
              });
              process.exit(1);
            } else {
              console.log('✅ All licenses are compatible');
            }
          } catch (error) {
            console.log('License check completed');
          }
          "

  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            const artifactsToDelete = artifacts.data.artifacts.filter(artifact => {
              const createdDate = new Date(artifact.created_at);
              const daysOld = (Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24);
              return daysOld > 30; // Delete artifacts older than 30 days
            });

            for (const artifact of artifactsToDelete) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }

            console.log(`Deleted ${artifactsToDelete.length} old artifacts`);